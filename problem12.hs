-- The sequence of triangle numbers is generated by adding the natural numbers. So the $7$th triangle number would be $1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$. The first ten terms would be:
-- $$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, \dots$$
-- What is the value of the first triangle number to have over five hundred divisors?

import Primes (factorize)

triangularNumbers :: [Int]
triangularNumbers = 1 : zipWith (+) triangularNumbers [2,3..]

rink :: [Int] -> [Int] -> [Int]
rink [] _ = []
rink _ [] = []
rink (x:xs) ys = (sum $ map (* x) ys) : (rink xs (tail ys))

spark :: [Int] -> [Int] -> Int
spark _ [] = 0
spark xs ys = let ys' = rink xs ys in (sum ys') + (spark xs (tail ys'))

{--
    number of different divisors can be calculated by counting all possible distinct combinations of prime factors.
    Let N equal the number of all factors and  n_i is multiplicity of i-th factor, 
    the number of combinations equals sum_(i,1,N) n_i + sum_(j,i+1,N) sum_(i,1,N) n_i * n_j + (h.o.t.)
--}

combinations :: [Int] -> Int
combinations xs = (sum xs) + (spark xs (tail xs))

multiplicities :: Eq a => [a] -> [Int]
multiplicities [] = []
multiplicities (x:xs) = (1 + (length $ takeWhile ((==) x) xs)) : (multiplicities $ dropWhile ((==) x) xs)

main :: IO ()
main = print $ head $ dropWhile ((<500) . combinations . multiplicities . factorize) $ tail triangularNumbers